package com.happypeople.hsh.hsh;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.happypeople.hsh.HshContext;
import com.happypeople.hsh.hsh.l1parser.L1Node;
import com.happypeople.hsh.hsh.l1parser.SimpleL1Node;
import com.happypeople.hsh.hsh.l1parser.Substitutable;

/** A L2Token extends Token to have:
 * -a list of L1Nodes as childs
 * -a method doSubstitution(...)
 */
public class L2Token extends Token implements L1Node {
	private final List<L1Node> parts=new ArrayList<L1Node>();

	public L2Token() {
		image="L2Token";
	}

	/** Adds part as a new Child
	 * @param part
	 * @return index of the added part
	 */
	public int addPart(final L1Node part) {
		parts.add(part);
		return parts.size()-1;
	}

	public L1Node getPart(final int idx) {
		return parts.get(idx);
	}

	@Override
	public Iterator<L1Node> iterator() {
		return parts.iterator();
	}

	/** Creates a printout of the node-tree
	 * @param level the level of the tree this node lives in
	 */
	@Override
	public void dump(final int level) {
		for(int i=0; i<level; i++)
			System.out.print("\t");
		System.out.println(getClass().getName());
		for(final L1Node child : parts)
			child.dump(level+1);
	}

	/**
	 * 2.6 Word Expansions
	 * This section describes the various expansions that are performed on words. Not all expansions are performed on every word,
	 * as explained in the following sections.
	 * Tilde expansions, parameter expansions, command substitutions, arithmetic expansions, and quote removals that occur
	 * within a single word expand to a single field.
	 * It is only field splitting or pathname expansion that can create multiple fields from a single word. The single
	 * exception to this rule is the expansion of the special parameter '@' within double-quotes, as described in Special
	 * Parameters.
	 *
	 * The order of word expansion shall be as follows:
	 * Tilde expansion (see Tilde Expansion), parameter expansion (see Parameter Expansion), command substitution
	 * (see Command Substitution), and arithmetic expansion (see Arithmetic Expansion) shall be performed, beginning to end.
	 * See item 5 in Token Recognition.
	 *
	 * Field splitting (see Field Splitting) shall be performed on the portions of the fields generated by step 1,
	 * unless IFS is null.
	 * Pathname expansion (see Pathname Expansion) shall be performed, unless set -f is in effect.
	 * Quote removal (see Quote Removal) shall always be performed last.
	 * The expansions described in this section shall occur in the same shell environment as that in which the command
	 * is executed.
	 * If the complete expansion appropriate for a word results in an empty field, that empty field shall be deleted from
	 * the list of fields that form the completely expanded command, unless the original word contained single-quote or
	 * double-quote characters.
	 * The '$' character is used to introduce parameter expansion, command substitution, or arithmetic evaluation. If an
	 * unquoted '$' is followed by a character that is either not numeric, the name of one of the special parameters
	 * (see Special Parameters), a valid first character of a variable name, a left curly brace ( '{' ) or a left
	 * parenthesis, the result is unspecified.
	 * @return a stream of Strings, the result of the substitution
	 * @throws com.happypeople.hsh.hsh.l1parser.ParseException if any subcommand cannot be parsed, or
	 * @throws ParseException if any subcommand cannot be parsed if any subcommand cannot be parsed.
	 */
	public Iterator<String> doSubstitution(final HshContext env) throws com.happypeople.hsh.hsh.l1parser.ParseException, ParseException {
		final List<String> list=new ArrayList<String>();
		for(final L1Node part : parts) {
			if(part instanceof Substitutable)
				for(final Iterator<String> iter=((Substitutable)part).doSubstitution(env);; iter.hasNext())
					list.add(iter.next());
			else // it is a SimpleL1Node
				list.add(((SimpleL1Node)part).getString());
		}

		return list.iterator();
	}

	@Override
	public String getString() {
		final StringBuilder sb=new StringBuilder();
		for(final L1Node part : parts)
			sb.append(part.getString());
		return sb.toString();
	}


}
