options
{
	STATIC=false;
	USER_TOKEN_MANAGER=true;
    FORCE_LA_CHECK=false;
    DEBUG_PARSER=false;
    DEBUG_LOOKAHEAD=false;
    //LOOKAHEAD=2;
}
PARSER_BEGIN(HshParser)
package com.happypeople.hsh.hsh;
import com.happypeople.hsh.hsh.parser.*;
import com.happypeople.hsh.hsh.l1parser.RuleApplier;
import com.happypeople.hsh.hsh.l1parser.ParserRule;

public class HshParser {
private final static boolean DEBUG=false;
private ListCallback listCallback;
private RuleApplier ruleApplier;
private HshLookaheadHelper helper=new HshLookaheadHelper(this);

	private void throwNI() {		throw new RuntimeException("not implemented");
	}

	public void setRuleApplier(RuleApplier ruleApplier) {
		this.ruleApplier=ruleApplier;	}
	
	public void setListCallback(ListCallback listCallback) {
		this.listCallback=listCallback;
	}
	
	private void fireListParsed(ListNode list) {
		if(listCallback!=null)
			listCallback.listParsed(list);
	}
	
	interface ListCallback {
		public void listParsed(ListNode list);
	}
	
	/** Returns true if the next Token is one of the cmd_prefix(): io_redirect or assignment
	* If true, the kind of the tokens are set accordingly.
	* [<IO_NUMBER>]<redir_operator><FILENAME> vs < ASSIGNMENT_WORD >
	*/
	private boolean lookahead_isCmdPrefix() {
		return helper.lookahead_isCmdPrefix();
	}

	private boolean lookahead_isIoRedir() {		return helper.lookahead_isIoRedir();
	}

	private boolean lookahead_reserved(int kind) {		return helper.lookahead_reserved(kind);
	}
}
PARSER_END(HshParser)

//TOKEN: {
//	< TODO 		: "TODO" >

/* external defined token */
/*
	<ASSIGNMENT_WORD>
|	<IO_NUMBER>
|	<NAME>
|	<NEWLINE>
|	<WORD>
*/

//|	< WS >

/* defined token. */
/*
|	< AND_IF >
|	< BANG >
|	< CASE >
|	< CLOBBER >
|	< DLESS >
|	< DLESSDASH >
|	< DGREAT >
|	< DO >
|	< DONE >
|	< DSEMI >
|	< ELSE >
|	< ELIF >
|	< ESAC >
|	< FI >
|	< FOR >
|	< GREATAND >
|	< GREAT >
|	< IF >
|	< IN >
|	< KLAMMER_AUF >
|	< KLAMMER_ZU >
|	< LBRACE >
|	< LESS >
|	< LESSAND >
|	< LESSGREAT >
|	< OR_IF	>
|	< RBRACE >
|	< SEMICOLON >
|	< THEN >
|	< UNTIL >
|	< UPPERSANT >
|	< PIPE >
|	< WHILE >
*/
//}

////////////////////////////////////// sh-grammar begins

/**
here_end         : WORD                      // Apply rule 3
                 ;
*/
void here_end():
{
}
{
	< WORD_3 >
	{ throw new RuntimeException("not implemented"); }
}
/**
io_here          : DLESS     here_end
                 | DLESSDASH here_end
                 ;
*/
void io_here():
{
}
{
	( ( < DLESS > | < DLESSDASH > ) here_end() )
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}
/*
filename         : WORD                      // Apply rule 2
                 ;
*/
String filename():
{
// TODO Apply rule 2
Token t;
}
{
	t=< WORD >
	{ return t.image; }
}
/*
io_file          : '<'       filename
                 | LESSAND   filename
                 | '>'       filename
                 | GREATAND  filename
                 | DGREAT    filename
                 | LESSGREAT filename
                 | CLOBBER   filename
                 ;
*/
void io_file(RedirNode redirNode):
{
String fname;
Token t;
}
{
	( t=< LESS > | t=< LESSAND > | t=< GREAT > | t=< GREATAND > | t=< DGREAT > | t=< LESSGREAT > | t=< CLOBBER > ) 
		fname=filename()
	{	redirNode.setOperator((L2Token)t);
		redirNode.setFilename(fname);
	}
}

/**
io_redirect      :           io_file
                 | IO_NUMBER io_file
                 |           io_here
                 | IO_NUMBER io_here
                 ;
*/
RedirNode io_redirect():
{
RedirNode redirNode=new RedirNode();
Token ioNum;
}
{
	( ioNum=< IO_NUMBER > { redirNode.setIoNumber(ioNum.image); } )? ( io_file(redirNode) | io_here() )
	{ return redirNode; }
}

/**
cmd_word         : WORD                   // Apply rule 7b
                 ;
*/
void cmd_word(SimpleCommand simpleCommand):
{
	Token t;}{
	t=< WORD > { simpleCommand.setCmdName((L2Token)t); }
}

/**
cmd_name         : WORD                   // Apply rule 7a
                 ;
*/
void cmd_name(SimpleCommand simpleCommand):
{
	Token t;}{
	t=< WORD > { simpleCommand.setCmdName((L2Token)t); }
}

/**
cmd_suffix       :            io_redirect
                 | cmd_suffix io_redirect
                 |            WORD
                 | cmd_suffix WORD
                 ;
*/
void cmd_suffix(final SimpleCommand simpleCommand):
{
	Token t;
	RedirNode redirNode;}{
// TODO javacc crash
//	( t=<WORD> { simpleCommand.addArg((L2Token)t); } )+
	( LOOKAHEAD( { lookahead_isIoRedir() }) redirNode=io_redirect() { simpleCommand.addRedirect(redirNode); }
		| t=<WORD> { simpleCommand.addArg((L2Token)t); } )+
	{ // after the suffix the next command will occur		//ruleApplier.setRule(HshParserRules.RULE7a);
	}
}

/**
cmd_prefix       :            io_redirect
                 | cmd_prefix io_redirect
                 |            ASSIGNMENT_WORD
                 | cmd_prefix ASSIGNMENT_WORD
                 ;
*/
void cmd_prefix(SimpleCommand simpleCommand):
{
// if cmd_prefix is found, another cmd_prefix can follow, so apply Rule7a again
	Token t;
	RedirNode redirNode;}{
	(
		LOOKAHEAD( { lookahead_isCmdPrefix() } ) // this lookahead will change the nodes kinds 		( redirNode=io_redirect() { simpleCommand.addRedirect(redirNode); }
	| t=< ASSIGNMENT_WORD > { simpleCommand.addAssignment((L2Token)t); } )
	)+
	{		// after the assignments is the cmd_name(), and after that the args
		//ruleApplier.setRule(null);
	}
}

/**
function_body    : compound_command                // Apply rule 9
                 | compound_command redirect_list  // Apply rule 9
                 ;
*/
void function_body():
{
}
{
	compound_command() ( redirect_list() )?
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
fname            : NAME                            // Apply rule 8
                 ;
*/
void fname():
{
}
{
	< WORD_8 >
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
function_definition : fname '(' ')' linebreak function_body
                 ;
*/
void function_definition():
{
}
{
	fname() < KLAMMER_AUF > < KLAMMER_ZU > linebreak() function_body()
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
redirect_list    :               io_redirect
                 | redirect_list io_redirect
                 ;
*/
void redirect_list():
{}{
	( LOOKAHEAD( { lookahead_isIoRedir() } ) io_redirect() )+
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
brace_group      : Lbrace compound_list Rbrace
                 ;
*/
void brace_group():
{
}
{
	< LBRACE > compound_list() < RBRACE >
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
subshell         : '(' compound_list ')'
                 ;
*/
void subshell():
{
}
{
	< KLAMMER_AUF > compound_list() < KLAMMER_ZU >
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
for_clause       : For name linebreak                            do_group
                 | For name linebreak in          sequential_sep do_group
                 | For name linebreak in wordlist sequential_sep do_group
                 ;
*/
void for_clause():
{
}
{
//	< FOR > name() linebreak() < IN > ( ( wordlist() )? sequential_sep() )? do_group()
	< FOR > name() linebreak() < IN > ( (<WORD>)* sequential_sep() )? do_group()
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
sequential_sep   : ';' linebreak
                 | newline_list
                 ;
*/
void sequential_sep():
{
}
{
	( < SEMICOLON > | < NEWLINE > ) ( <NEWLINE> )*
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
wordlist         : wordlist WORD
                 |          WORD
                 ;
*/
void wordlist():
{
}
{
	( <WORD> )+
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
name             : NAME                     // Apply rule 5
                 ;
*/
void name():
{
}
{
	< NAME5 >
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
case_list_ns     : case_list case_item_ns
                 |           case_item_ns
                 ;
*/
void case_list_ns():
{
}
{
	( case_item_ns() )+
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
pattern          :             WORD         // Apply rule 4
                 | pattern '|' WORD         // Do not apply rule 4
                 ;
*/
void pattern():
{
}
{
	< WORD4 > ( < PIPE > <WORD> )*
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
case_item_ns     :     pattern ')'               linebreak
                 |     pattern ')' compound_list linebreak
                 | '(' pattern ')'               linebreak
                 | '(' pattern ')' compound_list linebreak
                 ;
*/
void case_item_ns():
{
}
{
	( LOOKAHEAD(1) < KLAMMER_AUF > )? pattern() < KLAMMER_ZU > ( LOOKAHEAD(compound_list()) compound_list() )? linebreak() 
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
case_item        :     pattern ')' linebreak     DSEMI linebreak
                 |     pattern ')' compound_list DSEMI linebreak
                 | '(' pattern ')' linebreak     DSEMI linebreak
                 | '(' pattern ')' compound_list DSEMI linebreak
                 ;
*/
void case_item():
{
}
{
	/* compound_list() and linebreak() both may start with < NEWLINE > */
	( < KLAMMER_AUF > )? pattern() < KLAMMER_ZU > ( LOOKAHEAD(compound_list()) compound_list() | linebreak() ) < DSEMI > linebreak()
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
case_list        : case_list case_item
                 |           case_item
                 ;
*/
void case_list():
{
}
{
	( case_item() )+
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
case_clause      : Case WORD linebreak in linebreak case_list    Esac
                 | Case WORD linebreak in linebreak case_list_ns Esac 
                 | Case WORD linebreak in linebreak              Esac
                 ;
*/
void case_clause():
{
}
{
	< CASE > <WORD> linebreak() < IN > linebreak() ( LOOKAHEAD(case_list()) case_list() | case_list_ns() )? < ESAC >
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
if_clause        : If compound_list Then compound_list else_part Fi
                 | If compound_list Then compound_list           Fi
                 ;
*/
void if_clause():
{
}
{
	< IF > compound_list() < THEN > compound_list() ( else_part() )? < FI >
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
else_part        : Elif compound_list Then else_part
                 | Else compound_list
                 ;
*/
void else_part():
{
}
{
	< ELIF > compound_list() < THEN > else_part()
| 	< ELSE > compound_list()
	{ throw new RuntimeException("not implemented"); /* return ret;*/ }
}

/**
while_clause     : While compound_list do_group
                 ;
*/
WhileLoop while_clause():
{
WhileLoop ret=new WhileLoop();
TermNode condition;
TermNode body;
}
{
	( < WHILE >  | ( < UNTIL >	{ ret.setUntil(); } ) )
	condition=compound_list()	{ ret.addChild(condition); } 
	body=do_group()				{ ret.addChild(body); }
	{ return ret; }
}

/**
do_group         : Do compound_list Done           // Apply rule 6
                 ;
*/
TermNode do_group():
{
TermNode ret;
}
{
	< DO > ret=compound_list() < DONE >
	{ return ret; }
}

/**
compound_list    :              term
                 | newline_list term
                 |              term separator
                 | newline_list term separator
                 ;
*/
TermNode compound_list():
{
	TermNode termN;
}
{
	( LOOKAHEAD(1) newline_list() )?
	termN=term()
	( LOOKAHEAD(separator()) separator(termN) )?
	{ return termN; }
}

/**
term             : term separator and_or
                 |                and_or
                 ;
*/
TermNode term():
{
	TermNode ret=new TermNode();
	And_orNode and_orN;
}
{
	and_orN=and_or() { ret.addChild(and_orN); }
	( // This must lookahead for and_or. Since if not, the separator must not be consumed.
		( LOOKAHEAD(separator() and_or())
			separator(and_orN)		 	and_orN=and_or() { ret.addChild(and_orN);
		 		if(DEBUG) { 
		 			System.out.println("parsed another and_orN in term()");
		 			ret.dump(1);
		 		}
		 	}
		 )*
	)
	{ return ret; }
}

/**
compound_command : brace_group
                 | subshell
                 | for_clause
                 | case_clause
                 | if_clause
                 | while_clause
                 | until_clause
                 ;
*/
L2Node compound_command():
{
	L2Node compCommand=null;
}
{
	(	brace_group() { throwNI(); }|	subshell() { throwNI(); }
|	for_clause() { throwNI(); }
|	case_clause() { throwNI(); }
|	if_clause() { throwNI(); }
|	compCommand=while_clause()	// parses while and until
	)
	{ return compCommand; }
}
/**
simple_command   : cmd_prefix cmd_word cmd_suffix
                 | cmd_prefix cmd_word
                 | cmd_prefix
                 | cmd_name cmd_suffix
                 | cmd_name
                 ;
*/
SimpleCommand simple_command():
{
	SimpleCommand simpleCommand=new SimpleCommand();
}
{
(
	LOOKAHEAD( { lookahead_isCmdPrefix() } )
	 	cmd_prefix(simpleCommand)	( cmd_word(simpleCommand) ( cmd_suffix(simpleCommand))? )?
	|	cmd_name(simpleCommand)		( cmd_suffix(simpleCommand) )? 
)	{
	 	return simpleCommand;
	}
}

/** separator_op     : '&' | ';'
@param parent this separator belongs to
*/
void separator_op(Backgroundable parent):
{}
{	(		< UPPERSANT >	{ parent.setBackground(true); }	|	< SEMICOLON >	{ parent.setBackground(false); }
	)
	{
		// After a separator_op there can allways be a compound_command start with a reserved word...
		//ruleApplier.setRule(HshParserRules.RULE7a);
	}
}

/**
pipeline         :      pipe_sequence
                 | Bang pipe_sequence
                 ;
*/
PipeSequence pipeline():
{
	// needed before each command
	//ruleApplier.setRule(HshParserRules.RULE7a);
	PipeSequence ret;
}
{
	( ret=pipe_sequence()
|	< BANG > ret=pipe_sequence() { ret.setBanged(true); } )	{ return ret; }
}
/**
pipe_sequence    :                             command
                 | pipe_sequence '|' linebreak command
                 ;
*/
PipeSequence pipe_sequence():
{
	PipeSequence ret=new PipeSequence();
	L2Node cmd;}
{	cmd=command() { ret.addChild(cmd); } ( < PIPE > linebreak() command() { throwNI(); } )*
	{ return ret; }
}
/**
command          : simple_command
                 | compound_command
                 | compound_command redirect_list
                 | function_definition
                 ;
*/
Command command():
{
	Command ret=new Command();
	L2Node simpleCommand;
	L2Node compCommand;
}
{
	( 
	simpleCommand=simple_command() { ret.addChild(simpleCommand); }
|	compCommand=compound_command() ( redirect_list() { throwNI(); })? { ret.addChild(compCommand); }|	function_definition() { throwNI(); } )
	{ return ret; }
}

/*
newline_list     :              NEWLINE
                 | newline_list NEWLINE
                 ;
*/
void newline_list():
{
}
{
	( LOOKAHEAD(1) < NEWLINE > )+
}
/**
linebreak        : newline_list
                 | // empty
                 ;
*/
void linebreak():
{
}
{
	( LOOKAHEAD(1) <NEWLINE> )*
}
/**
and_or           :                         pipeline
                 | and_or AND_IF linebreak pipeline
                 | and_or OR_IF  linebreak pipeline
                 ;
reads as:
pipeline ( (AND_IF|OR_IF) linebreak pipeline)*
*/
And_orNode and_or():
{
	And_orNode ret=new And_orNode();
	L2Node pipeline;
	Token t;
}
{
	( pipeline=pipeline() { ret.addChild(pipeline); }
		( ( t=< AND_IF > | t=< OR_IF > ) { ret.addChild((L2Token)t); } linebreak()
		pipeline=pipeline()		{ ret.addChild(pipeline); } )* )
	{ return ret; }
}
/** separator	: separator_op linebreak
 * 				| newline_list
 * ;
 * @param parent where setBackground(true) is called if it should be executed in background
 * @param cb callback which is called if parent should not be executed in background, and
 * therefore might be executed right now.
 */
void separator(Backgroundable parent):
{
	// After a separator there can allways be a compound_command start with a reserved word...
	//ruleApplier.setRule(HshParserRules.RULE7a);
}
{
	(	separator_op(parent) linebreak()
		|		{ parent.setBackground(false); }		newline_list()
	)
}
	
/** list 	:		list separator_op and_or
*				|	and_or ;
*/
ListNode list():
{
	ListNode ret=new ListNode();
	And_orNode and_orN;
}
{
	and_orN=and_or() { ret.addChild(and_orN); }
	( LOOKAHEAD(separator_op()) 
		separator_op(and_orN) and_orN=and_or() 
			{ ret.addChild(and_orN); }
	)*
		
	{ return ret; }
}

/** complete_command :		list separator
*                 		|	list ;
*/
CompleteCommand complete_command():
{
	final CompleteCommand cc=new CompleteCommand();
	final ListNode[] listN=new ListNode[1];
	Backgroundable bg=new Backgroundable() {
		public void setBackground(boolean bg) {
			listN[0].setBackground(bg);   			fireListParsed(listN[0]);
		}
		public boolean isBackground() { return true; }	};
}
{
    (	listN[0]=list()
    	{ 	if(listCallback==null)
    			cc.setList(listN[0]);
    	}
		( separator(bg) )?
	)
    { return cc; }
}