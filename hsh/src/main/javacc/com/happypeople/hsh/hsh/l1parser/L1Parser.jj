options
{
	STATIC=false;
	USER_TOKEN_MANAGER=false;
	FORCE_LA_CHECK=true;
	TOKEN_MANAGER_USES_PARSER=true;
	DEBUG_PARSER=false;
	DEBUG_TOKEN_MANAGER=false;
}
PARSER_BEGIN(L1Parser)
/** http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_02
 ** 2.3 Token Recognition
* The shell shall read its input in terms of lines from a file, from a terminal in the case of an interactive shell,
* or from a string in the case of sh -c or system(). The input lines can be of unlimited length.
* These lines shall be parsed using two major modes: ordinary token recognition and processing of here-documents.

* When an io_here token has been recognized by the grammar (see Shell Grammar), one or more of the subsequent lines
* immediately following the next NEWLINE token form the body of one or more here-documents and shall be parsed according
* to the rules of Here-Document.

* When it is not processing an io_here, the shell shall break its input into tokens by applying the first applicable
* rule below to the next character in its input. The token shall be from the current position in the input until a
* token is delimited according to one of the rules below; the characters forming the token are exactly those in the
* input, including any quoting characters. If it is indicated that a token is delimited, and no characters have been
* included in a token, processing shall continue until an actual token is delimited.

* 1. If the end of input is recognized, the current token shall be delimited. If there is no current token,
* 	the end-of-input indicator shall be returned as the token.

* 2. If the previous character was used as part of an operator and the current character is not quoted and can be used
* 	with the current characters to form an operator, it shall be used as part of that (operator) token.

* 3. If the previous character was used as part of an operator and the current character cannot be used with the current
* 	characters to form an operator, the operator containing the previous character shall be delimited.

* 4. If the current character is backslash, single-quote, or double-quote ( '\', '", or ' )' and it is not quoted,
* 	it shall affect quoting for subsequent characters up to the end of the quoted text. The rules for quoting are as
* 	described in Quoting. During token recognition no substitutions shall be actually performed, and the result token
* 	shall contain exactly the characters that appear in the input (except for <newline> joining), unmodified, including
* 	any embedded or enclosing quotes or substitution operators, between the quote mark and the end of the quoted text.
* 	The token shall not be delimited by the end of the quoted field.

* 5. If the current character is an unquoted '$' or '`', the shell shall identify the start of any candidates for
* 	parameter expansion ( Parameter Expansion), command substitution ( Command Substitution), or arithmetic expansion
* 	( Arithmetic Expansion) from their introductory unquoted character sequences: '$' or "${", "$(" or '`', and
*	 "$((", respectively. The shell shall read sufficient input to determine the end of the unit to be expanded
*	(as explained in the cited sections). While processing the characters, if instances of expansions or quoting are
*	found nested within the substitution, the shell shall recursively process them in the manner specified for the
*	construct that is found. The characters found from the beginning of the substitution to its end, allowing for any
*	recursion necessary to recognize embedded constructs, shall be included unmodified in the result token, including any
*	embedded or enclosing substitution operators or quotes. The token shall not be delimited by the end of the substitution.

* 6. If the current character is not quoted and can be used as the first character of a new operator, the current token
* 	(if any) shall be delimited. The current character shall be used as the beginning of the next (operator) token.

* 7. If the current character is an unquoted <newline>, the current token shall be delimited.

* 8. If the current character is an unquoted <blank>, any token containing the previous character is delimited and the
* 	current character shall be discarded.

* 9. If the previous character was part of a word, the current character shall be appended to that word.

* 10. If the current character is a '#', it and all subsequent characters up to, but excluding, the next <newline>
* shall be discarded as a comment. The <newline> that ends the line is not considered part of the comment.

* 11. The current character is used as the start of a new word.

* Once a token is delimited, it is categorized as required by the grammar in Shell Grammar.

********************************************************************************************
2.2.3 Double-Quotes

Enclosing characters in double-quotes ( "" ) shall preserve the literal value of all characters within the double-quotes,
with the exception of the characters dollar sign, backquote, and backslash, as follows:

$
The dollar sign shall retain its special meaning introducing parameter expansion (see Parameter Expansion), a form of
command substitution (see Command Substitution), and arithmetic expansion (see Arithmetic Expansion).
The input characters within the quoted string that are also enclosed between "$(" and the matching ')' shall not be
affected by the double-quotes, but rather shall define that command whose output replaces the "$(...)" when the word is
expanded. The tokenizing rules in Token Recognition , not including the alias substitutions in Alias Substitution , shall
be applied recursively to find the matching ')'.

Within the string of characters from an enclosed "${" to the matching '}', an even number of unescaped double-quotes or
single-quotes, if any, shall occur. A preceding backslash character shall be used to escape a literal '{' or '}'.
The rule in Parameter Expansion shall be used to determine the matching '}' .

`
The backquote shall retain its special meaning introducing the other form of command substitution
(see Command Substitution). The portion of the quoted string from the initial backquote and the characters up to the
next backquote that is not preceded by a backslash, having escape characters removed, defines that command whose output
replaces "`...`" when the word is expanded.
Either of the following cases produces undefined results:
A single-quoted or double-quoted string that begins, but does not end, within the "`...`" sequence
A "`...`" sequence that begins, but does not end, within the same double-quoted string

\
The backslash shall retain its special meaning as an escape character (see Escape Character (Backslash)) only when
followed by one of the following characters when considered special:
$   `   "   \   <newline>

The application shall ensure that a double-quote is preceded by a backslash to be included within double-quotes.
The parameter '@' has special meaning inside double-quotes and is described in Special Parameters.
********************************************************************************************
http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_09_01
The following are the operators mentioned above.


AND_IF    OR_IF    DSEMI
 '&&'      '||'     ';;'    


DLESS  DGREAT  LESSAND  GREATAND  LESSGREAT  DLESSDASH
 '<<'   '>>'    '<&'     '>&'      '<>'       '<<-'   


 CLOBBER
   '>|'

* ******************************************************************************************
* Tokenizer States tree:
* -DEFAULT
*	-BACKSLASH escapes any following char: BQUOTED
*		-following char : DEFAULT
*	-SINGLEQUOTE escapes all chars: SQUOTED
*		-SINGLEQUOTE : DEFAULT
*	-DOUBLEQOUTE : DQUOTED
*		-BACKSLASH escapes: $, BACKTIC, BACKSLASH, DOUBLEQUOTE
*		-$ starts substitution : DOUBLEQUOTE_DOLLAR
*		-BACKTIC start substitution : DOUBLEQUOTE_BACKTICKED
*		-DOUBLEQUOTE : DEFAULT
*	-BACKTIC : DEFAULT_BACKTICKED
*		--TODO
*/

package com.happypeople.hsh.hsh.l1parser;
import java.util.*;
import com.happypeople.hsh.hsh.L2Token;
import com.happypeople.hsh.hsh.HshParserConstants;

public class L1Parser // implements TokenManager
{
	final boolean DEBUG=false;
	
	/** Stack of states. Usefull to switch to "previous" state. Initialized to DEFAULT. */
	private LinkedList<Integer> stateStack=new LinkedList<Integer>(Arrays.asList(DEFAULT));

	/** Called by TokenManager */
	void pushState(int state) {
		if(DEBUG)
			System.out.println("pushState: "+state);
		stateStack.push(state);
		token_source.SwitchTo(state);
	}

	/** Called by TokenManager */
	void popState() {
		final int oldstate=stateStack.pop();
		final int state=stateStack.peek();
		if(DEBUG)
			System.out.println("popState, from:"+oldstate+" to:"+state);
		token_source.SwitchTo(state);
	}

	/** Interface for token-translation between L1Parser and L2Parser
	*/
	public L2Token nextL1Node() throws ParseException {
		L2Token t;
		do {			word(t=new L2Token());
			if(DEBUG)
				System.out.println("nextL1Node: "+t.kind+" "+t.image);
		} while(t.kind==WS); // skip WS
		return t;
	}

	/** This needs to be defined, because in L2Parser there is no WS.
	*	Note that WS-Token are not sent to L2Parser.
	* 	It is defined as -42, because this is an unused number for Token-constants (they are all >=0)
	*/
	private final static int WS_KIND=-42;
	private final static int UNDEFINED_KIND=-1;

	private final static int[] kindMap=new int[Math.max(
		L1ParserConstants.tokenImage.length,
		HshParserConstants.tokenImage.length)];
	static {
		for(int i=0; i<kindMap.length; i++)
			kindMap[i]=UNDEFINED_KIND;

		kindMap[L1ParserConstants.EOF]=HshParserConstants.EOF;
		kindMap[L1ParserConstants.AND_IF]=HshParserConstants.AND_IF;
		kindMap[L1ParserConstants.OR_IF]=HshParserConstants.OR_IF;
		kindMap[L1ParserConstants.DSEMI]=HshParserConstants.DSEMI;
		kindMap[L1ParserConstants.DLESS]=HshParserConstants.DLESS;
		kindMap[L1ParserConstants.DGREAT]=HshParserConstants.DGREAT;
		kindMap[L1ParserConstants.GREAT]=HshParserConstants.GREAT;
		kindMap[L1ParserConstants.GREATAND]=HshParserConstants.GREATAND;
		kindMap[L1ParserConstants.LESSAND]=HshParserConstants.LESSAND;
//		kindMap[L1ParserConstants.LESS]=HshParserConstants.LESS;
		kindMap[L1ParserConstants.LESSGREAT]=HshParserConstants.LESSGREAT;
		kindMap[L1ParserConstants.DLESSDASH]=HshParserConstants.DLESSDASH;
		kindMap[L1ParserConstants.CLOBBER]=HshParserConstants.CLOBBER;
		kindMap[L1ParserConstants.NEWLINE]=HshParserConstants.NEWLINE;
		kindMap[L1ParserConstants.SEMICOLON]=HshParserConstants.SEMICOLON;
		kindMap[L1ParserConstants.WS]=WS_KIND;
		// TODO others ???
	}

	/** Returns the L2-kind according to l1kind
	 * @param kind L1 kind
	 * @return L2 kind
	 */
	private int translateL1KindToL2Kind(final int l1kind) {
		final int l2kind=kindMap[l1kind];
		if(l2kind==UNDEFINED_KIND)
			throw new RuntimeException("internal error: cannot map L1-Kind: "+l1kind);
		return l2kind;
	}

	/** Interface for dynamic extra actions. */
	interface Action {
		public void after();
	}
}

PARSER_END(L1Parser)

TOKEN:
{	< #SQUOTE: "'" >
|	< #DQUOTE: "\"" > 
|	< #BQUOTE: "\\" >
|	< #BACKTIC:	"`" >
//|	< #def_DOLLAR:	"$" >
|	< #BANYTHING: ~[] >
|	< #DEF_ESC_BACKSLASH	: "\\\\" >
|	< #def_DEFAULT_ANYTHING	: (~["`", "'", "\"", "\\", 
								" ", "\t", "\r", "\n", 
								"&", "|", ";", "$", "{", "}", "(", ")", "<", ">", "=" ])+ >
	// chars of DEFAULT_ANYTHING and DO_SPECIAL
|	< #def_DA_AND_DO_SPECIAL	:  ~["`", "'", "\"", "\\", " ", "\t", "\n", "&", "|", ";", "$", "{", "}", "=", ":",
									"0"-"9", "@", "*", "#", "?", "_", "$", "!"] >
|	< #def_DO_SPECIAL			:  ["0"-"9", "@", "*", "#", "?", "_", "$", "!"] >
|	< #def_NUMBER				: (["0"-"9"])+ >
|	< #def_NAME					: ["_", "a"-"z", "A"-"Z"](["_", "a"-"z", "A"-"Z", "0"-"9"])* >
}

TOKEN:
{ // operators
	< AND_IF	: "&&" >|	< OR_IF		: "||" >
|   < DSEMI		: ";;" >
|	< DLESS		: "<<" >
|	< DGREAT	: ">>" >
|	< LESSAND	: "<&" >
|	< GREATAND	: ">&" >
|	< LESSGREAT	: "<>" >
|	< DLESSDASH : "<<-" > 
|	< CLOBBER	: ">|" >

// first letters of operators
|	< UPPERSANT	: "&" >
|	< PIPE 		: "|" >
|	< SEMICOLON : ";" >  
|	< LESS  	: "<" >  
|	< GREAT  	: ">" >  

// reserved words
//|	< IF  		: "if" >  
//|	< THEN 		: "then" >  
//|	< ELSE 		: "else" >  
//|	< ELIF 		: "elif" >  
//|	< FI  		: "fi" >  
//|	< DO  		: "do" >  
//|	< DONE 		: "done" >  
//|	< CASE 		: "case" >  
//|	< ESAC 		: "esac" >  
//|	< WHILE		: "while" >  
//|	< UNTIL		: "until" >  
//|	< FOR		: "for" >  

// other reserved words
// These are reserved words, not operator tokens, and are
// recognized when reserved words are recognized.
|	< LBRACE	: "{" >  
|	< RBRACE	: "}" >  
|	< BANG		: "!" >  
//|	< IN		: "in" >  

// other special chars
|	< COLON			: ":" >
|	< KLAMMER_AUF	: "(" >
|	< KLAMMER_ZU	: ")" >
|	< EQUALS		: "=" >
}

// reached on "${"
<DOLLAR_LBRACE> TOKEN:
{
	< _RBRACE 	: <RBRACE> >								{ parser.popState(); }
|	< COLON_OP	: ":-"|"-"|":="|"="|":?"|"?"|":+"|"+"|"#"|"##"|"%"|"%%" >	{ parser.pushState(DEFAULT); }
}	

< DEFAULT, BACKTICKED, DOLLAR_LBRACE > TOKEN:
{
	< ANY_ESCAPED_CHAR			: "\\" < BANYTHING > >
}

< DOLLAR_LBRACE_VARNAME > TOKEN:
{
	< DS_VARNAME	: (~[" ", "\t", "%", "#", ":", "}"])+ >		{ parser.popState(); }
}

< DEFAULT, DQUOTED > TOKEN:
{	< BACKTIC_START			: < BACKTIC > > { parser.pushState(BACKTICKED); }
|	< DOLLAR_LBRACE_START	: "${"	>		{ parser.pushState(DOLLAR_LBRACE); 
											  parser.pushState(DOLLAR_LBRACE_VARNAME); }
|	< DOLLAR_EXEC_START		: "$("	>
|	< DOLLAR				: "$"	>		{ parser.pushState(DOLLAR_ONLY); }
}

// reached on "$"
<DOLLAR_ONLY> TOKEN:
{
	< DO_SPECIAL	:< def_DO_SPECIAL > >									{ parser.popState(); }
|	< DO_MULTI		:< def_DA_AND_DO_SPECIAL > (<def_DEFAULT_ANYTHING >)? >	{ parser.popState(); }
}

/** no escaped chars possible in SQUOTED */
<SQUOTED> TOKEN:
{
	< SQUOTE_END: < SQUOTE > > { parser.popState(); }	 // :DEFAULT	
|	< SANYTHING	: (~["'"])+ >
}


/** In BACKTICKED we have to find the end of the backtic state. Anything else is one unit (which will be
	later parsed when substituted).
*/
<BACKTICKED > TOKEN:
{
	< BACKTIC_ANYTHING	: (~["`", "\\"])+ >
|	< BACKTIC_END 		: < BACKTIC > >	{ parser.popState(); }
}

<DEFAULT> TOKEN:
{
	< SQUOTE_START	: < SQUOTE > > { parser.pushState(SQUOTED); }
|	< DQUOTE_START	: < DQUOTE > > { parser.pushState(DQUOTED); }
|	< WS			: (" "|"\t")+  >
|	< NEWLINE		: "\n" | "\r\n" >
}

<DEFAULT> TOKEN:
{
	< NAME					: < def_NAME > >
|	< NUMBER				: < def_NUMBER > >
|	< DEFAULT_ANYTHING		: < def_DEFAULT_ANYTHING > >
}

/** According to 2.2.3
The backslash shall retain its special meaning as an escape character only when
followed by one of the following characters when considered special:
$   `   "   \   <newline>
*/
<DQUOTED> TOKEN:
{
	< ESC_DQUOTE			: "\\\"" >
|	< ESC_DOLLAR			: "\\$" >
|	< ESC_BACKTIC			: "\\`" >
|	< ESC_BACKSLASH			: < DEF_ESC_BACKSLASH > >
	/* a backslash is a simple char if not followed by one of the above. */
|	< CHAR_BACKSLASH		: < BQUOTE > >
|	< DQUOTE_END			: < DQUOTE > >	{ parser.popState(); }/* : DEFAULT */
	/** anything else */
|	< DANYTHING				: (~["\"", "$", "`", "\\"])+ >
}

L1Node default_part(L2Token l2token):
{
L1Node node=null;
Token t;
int off=l2token.getLen();
}
{
	(	t=< ANY_ESCAPED_CHAR > { node=new BackslashQuotedL1Node(l2token, off, t.image.length()); }|	 	t=< NUMBER > 
|	 	t=< NAME > 
|	 	t=< DEFAULT_ANYTHING > 
|	 	t=< BANG > 
|	 	t=< KLAMMER_AUF > 
|	 	t=< KLAMMER_ZU > 
|	 	t=< LESS > 
|	 	t=< GREAT >
|		t=< EQUALS >
	)
	{ 
		l2token.append(t.image);
		if(node==null)
			return new SimpleL1Node(l2token, off, l2token.getLen()-off, t.kind);
		return node;
	}
}

L1Node dollar_exec(L2Token l2Token):
{
Token t;
}
{
	t=< DOLLAR_EXEC_START >		{ l2Token.append(t.image); 
		// TODO:
		// * instantiate HshParser
		// * instantiate L1Parser as TokenManager for instantiated HshParser
		// * instantiate a generic TokenManager for instantiated L1Parser
		// * feed L1-tokens generated by the tokenManager of this parser into the generic TokenManager, 
		//   until KLAMMER_ZU. Or call hshParser.subshell(), which will suck tokens until KLAMMER_ZU.
		// * put the L2Token generated by hshParser.subshell() into l2Token, and return.
		L1ParserTokenManager genTokManager=new GenericL1ParserTokenManager();
		L1Parser genParser=new L1Parser(genTokManager);
		L2ParserTokenManager l2TokManager=new L2ParserTokenManager(genParser);
		HshParser hshParser=new HshParser(l2TokManager);
		L2Token l2tok=hshParser.subshell();
	}
	t=< KLAMMER_ZU >			{ l2Token.append(t.image); 
		// TODO return new DollarExecNode(...)
		return new SimpleL1Node(l2Token, 0, 0);
	}
}

L1Node dollar_subst(L2Token l2Token):
{
	L1Node parameter=null;
	L1Node operator=null;
	Token t;
	int off=l2Token.getLen();
	ComplexL1Node wplParent=null;
}{
	(	t=< DOLLAR_LBRACE_START >		{ l2Token.append(t.image); }
	t=<DS_VARNAME>					{ parameter=new SimpleL1Node(l2Token, l2Token.getLen(), t.image.length());
										l2Token.append(t.image); }
	(
		t=< COLON_OP >				{ operator=new SimpleL1Node(l2Token, l2Token.getLen(), t.image.length());
										l2Token.append(t.image); }		word_part_list(l2Token, wplParent=new GenericComplexL1Node(l2Token, l2Token.getLen(), 0))	{ 
			popState();
			// switch the currents token kind to _RBRACE
			Token token=getToken(1);
			if(token.kind==RBRACE) {
				if(DEBUG)
					System.out.println("switching token kind from RBRACE to _RBRACE");
				token.kind=_RBRACE;
			} else 
				throw new RuntimeException("did not work, kind="+jj_ntk);
				
			wplParent.addLen(l2Token.getLen()-wplParent.getOff());
		}
	)?
	t=< _RBRACE >	{ l2Token.append(t.image); }
	) { 
		DollarSubstNode ret=new DollarSubstNode(l2Token, off, l2Token.getLen()-off);
		if(parameter!=null)
			ret.setParameter(parameter);
		if(operator!=null)
			ret.setOperator(operator);
		if(wplParent!=null) {
			ret.setWord(wplParent);
		}
		return ret;
	}
}

L1Node dollar_var(L2Token l2token):
{
	Token t;
}{
	< DOLLAR >
	( t=< DO_SPECIAL >
|	  t=< DO_MULTI > )
	{ L1Node ret=new DollarVarNode(l2token, l2token.getLen(), t.image.length()+1, t);
		l2token.append("$").append(t.image);
		return ret;
	}}

/** A double quoted part. There can be backticked and dollar- subparts. */
L1Node dquoted(L2Token l2Token):
{
	List<L1Node> childs=new ArrayList<L1Node>();
	Token t=null;
	L1Node childNode=null;
	final int off=l2Token.getLen();
}
{
	< DQUOTE_START > { l2Token.append("\""); }
	(
		(		  t=< ESC_DQUOTE >		{ childs.add(new SimpleL1Node(l2Token, 1, 1)); t.image="\""; }		| t=< ESC_DOLLAR >		{ childs.add(new SimpleL1Node(l2Token, 1, 1)); t.image="$"; }
		| t=< ESC_BACKTIC >		{ childs.add(new SimpleL1Node(l2Token, 1, 1)); t.image="`"; }
		| t=< ESC_BACKSLASH >	{ childs.add(new SimpleL1Node(l2Token, 1, 1)); t.image="\\"; }
		| t=< CHAR_BACKSLASH >	{ childs.add(new SimpleL1Node(l2Token, 1, 1)); t.image="\\"; }
		| t=< DANYTHING >		{ childs.add(new SimpleL1Node(l2Token, l2Token.getLen(), t.image.length())); }
		| childNode=backticked(l2Token)
		| childNode=dollar_var(l2Token)
		| childNode=dollar_subst(l2Token)
		| childNode=dollar_exec(l2Token)
		)
		{
			if(t!=null) {
				l2Token.append(t.image);
			} else // childNode!=null
				childs.add(childNode);		}	)*
	< DQUOTE_END >
	{ 	l2Token.append("\"");
		DQuotedL1Node ret=new DQuotedL1Node(l2Token, off, l2Token.getLen()-off);
		for(L1Node l1Node : childs)
			ret.add(l1Node);
		return ret;
	}
}

/** Creates a BacktickedNode representing what is found between the two backtics.
This is stored as a String in the node for later parsing.
*/
L1Node backticked(L2Token l2token):
{
Token t;
int off=l2token.getLen();
}
{
	< BACKTIC_START >	{ l2token.append("`"); }		(
		t=< ANY_ESCAPED_CHAR > { l2token.append(t.image); }	
	|	t=< BACKTIC_ANYTHING > { l2token.append(t.image); }
	)*
	< BACKTIC_END >		{ l2token.append('`');
			// TODO could check if number of ", ' and ` are even and/or nested wrong
			// But the subsequent parsing of the backticked command will do this either
			BacktickedNode ret=new BacktickedNode(l2token, off, l2token.getLen()-off);
			return ret;
		}}

/** Single quoted part of a word */
L1Node squoted(L2Token l2Token):
{Token t;
int off=l2Token.getLen();
}{	<SQUOTE_START>	{ l2Token.append("'"); }	( t=<SANYTHING>	{ l2Token.append(t.image); } )?
	<SQUOTE_END>	{ l2Token.append("'");
		return new SQuotedL1Node(l2Token, off, l2Token.getLen()-off);
	}}

void separating_part(L2Token l2Token):
{
	Token t;}{
	(	t=< AND_IF >
|	t=< OR_IF >
|   t=< DSEMI >
|	t=< DLESS >
|	t=< DGREAT >
|	t=< LESSAND >
|	t=< GREATAND >
|	t=< LESSGREAT >
|	t=< DLESSDASH > 
|	t=< CLOBBER >
// Not sure what to do with these.
// They must be parsed, they separate words.
// But they are no Operators. ???
|	t=< UPPERSANT >
|	t=< PIPE >
|	t=< SEMICOLON >
// these are no operators, but separate words, too
|	t=< WS > // Note: WS is not sent to HshParser, but separates words.
|	t=< NEWLINE >
	) {
		l2Token.kind=t.kind;
		l2Token.append(t.image);
		l2Token.addPart(new SimpleL1Node(l2Token, l2Token.getLen(), t.image.length(), t.kind));
	}
}

/** part of a word 
* Result of parsing on L1-Level is a stream of word_part, which are
* then concatenated to words according to several rules.
* These words are the tokens for parsing on L2-Level.
* A word_part is a  L1Nodes which is the content of that part of a word.
* Which word_parts are concatenated to form complete words, and which ones act as
* word separators is implemented in L2TokenManager.
*/
L1Node word_part(L2Token l2token):
{
	L1Node child;
}
{
	(
	child=backticked(l2token)	
|	child=dquoted(l2token)		
|	child=squoted(l2token)
|	child=dollar_subst(l2token)
|	child=dollar_exec(l2token)
|	child=dollar_var(l2token)
|	child=default_part(l2token)
	)
	{ return child; }
}

/** A word_part_list is a L2Token
*/
void word_part_list(L2Token l2token, ComplexL1Node parent):
{
L1Node node;
}
{		( node=word_part(l2token) { parent.add(node); } )+
		{ l2token.kind=HshParserConstants.WORD; }
}

/** A word is a separating_part() or a concatenation of word_part() or <EOF>
*/
void word(L2Token ret):
{
	Token t;
	L1Node list=null;
	L1Node part;
	ComplexL1Node wplParent=null;
}{
	( 
			word_part_list(ret, wplParent=new GenericComplexL1Node(ret, ret.getLen(), 0)) {
				for(L1Node node : wplParent)
					ret.addPart(node);
			}
		|	separating_part(ret)
		|	t=<EOF> {
						ret.kind=HshParserConstants.EOF;
						// empty image
					}	)
	{
		ret.finishImage();
	}}
