options
{
	STATIC=false;
	USER_TOKEN_MANAGER=false;
	FORCE_LA_CHECK=true;

//	DEBUG_PARSER=true;
//	DEBUG_TOKEN_MANAGER=true;
}
PARSER_BEGIN(L1Parser)
/** http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_02
 ** 2.3 Token Recognition
* The shell shall read its input in terms of lines from a file, from a terminal in the case of an interactive shell,
* or from a string in the case of sh -c or system(). The input lines can be of unlimited length.
* These lines shall be parsed using two major modes: ordinary token recognition and processing of here-documents.

* When an io_here token has been recognized by the grammar (see Shell Grammar), one or more of the subsequent lines
* immediately following the next NEWLINE token form the body of one or more here-documents and shall be parsed according
* to the rules of Here-Document.

* When it is not processing an io_here, the shell shall break its input into tokens by applying the first applicable
* rule below to the next character in its input. The token shall be from the current position in the input until a
* token is delimited according to one of the rules below; the characters forming the token are exactly those in the
* input, including any quoting characters. If it is indicated that a token is delimited, and no characters have been
* included in a token, processing shall continue until an actual token is delimited.

* 1. If the end of input is recognized, the current token shall be delimited. If there is no current token,
* 	the end-of-input indicator shall be returned as the token.

* 2. If the previous character was used as part of an operator and the current character is not quoted and can be used
* 	with the current characters to form an operator, it shall be used as part of that (operator) token.

* 3. If the previous character was used as part of an operator and the current character cannot be used with the current
* 	characters to form an operator, the operator containing the previous character shall be delimited.

* 4. If the current character is backslash, single-quote, or double-quote ( '\', '", or ' )' and it is not quoted,
* 	it shall affect quoting for subsequent characters up to the end of the quoted text. The rules for quoting are as
* 	described in Quoting. During token recognition no substitutions shall be actually performed, and the result token
* 	shall contain exactly the characters that appear in the input (except for <newline> joining), unmodified, including
* 	any embedded or enclosing quotes or substitution operators, between the quote mark and the end of the quoted text.
* 	The token shall not be delimited by the end of the quoted field.

* 5. If the current character is an unquoted '$' or '`', the shell shall identify the start of any candidates for
* 	parameter expansion ( Parameter Expansion), command substitution ( Command Substitution), or arithmetic expansion
* 	( Arithmetic Expansion) from their introductory unquoted character sequences: '$' or "${", "$(" or '`', and
*	 "$((", respectively. The shell shall read sufficient input to determine the end of the unit to be expanded
*	(as explained in the cited sections). While processing the characters, if instances of expansions or quoting are
*	found nested within the substitution, the shell shall recursively process them in the manner specified for the
*	construct that is found. The characters found from the beginning of the substitution to its end, allowing for any
*	recursion necessary to recognize embedded constructs, shall be included unmodified in the result token, including any
*	embedded or enclosing substitution operators or quotes. The token shall not be delimited by the end of the substitution.

* 6. If the current character is not quoted and can be used as the first character of a new operator, the current token
* 	(if any) shall be delimited. The current character shall be used as the beginning of the next (operator) token.

* 7. If the current character is an unquoted <newline>, the current token shall be delimited.

* 8. If the current character is an unquoted <blank>, any token containing the previous character is delimited and the
* 	current character shall be discarded.

* 9. If the previous character was part of a word, the current character shall be appended to that word.

* 10. If the current character is a '#', it and all subsequent characters up to, but excluding, the next <newline>
* shall be discarded as a comment. The <newline> that ends the line is not considered part of the comment.

* 11. The current character is used as the start of a new word.

* Once a token is delimited, it is categorized as required by the grammar in Shell Grammar.

********************************************************************************************
2.2.3 Double-Quotes

Enclosing characters in double-quotes ( "" ) shall preserve the literal value of all characters within the double-quotes,
with the exception of the characters dollar sign, backquote, and backslash, as follows:

$
The dollar sign shall retain its special meaning introducing parameter expansion (see Parameter Expansion), a form of
command substitution (see Command Substitution), and arithmetic expansion (see Arithmetic Expansion).
The input characters within the quoted string that are also enclosed between "$(" and the matching ')' shall not be
affected by the double-quotes, but rather shall define that command whose output replaces the "$(...)" when the word is
expanded. The tokenizing rules in Token Recognition , not including the alias substitutions in Alias Substitution , shall
be applied recursively to find the matching ')'.

Within the string of characters from an enclosed "${" to the matching '}', an even number of unescaped double-quotes or
single-quotes, if any, shall occur. A preceding backslash character shall be used to escape a literal '{' or '}'.
The rule in Parameter Expansion shall be used to determine the matching '}' .

`
The backquote shall retain its special meaning introducing the other form of command substitution
(see Command Substitution). The portion of the quoted string from the initial backquote and the characters up to the
next backquote that is not preceded by a backslash, having escape characters removed, defines that command whose output
replaces "`...`" when the word is expanded.
Either of the following cases produces undefined results:
A single-quoted or double-quoted string that begins, but does not end, within the "`...`" sequence
A "`...`" sequence that begins, but does not end, within the same double-quoted string

\
The backslash shall retain its special meaning as an escape character (see Escape Character (Backslash)) only when
followed by one of the following characters when considered special:
$   `   "   \   <newline>

The application shall ensure that a double-quote is preceded by a backslash to be included within double-quotes.
The parameter '@' has special meaning inside double-quotes and is described in Special Parameters.
********************************************************************************************
http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_09_01
The following are the operators mentioned above.


AND_IF    OR_IF    DSEMI
 '&&'      '||'     ';;'    


DLESS  DGREAT  LESSAND  GREATAND  LESSGREAT  DLESSDASH
 '<<'   '>>'    '<&'     '>&'      '<>'       '<<-'   


 CLOBBER
   '>|'

* ******************************************************************************************
* Tokenizer States tree:
* -DEFAULT
*	-BACKSLASH escapes any following char: BQUOTED
*		-following char : DEFAULT
*	-SINGLEQUOTE escapes all chars: SQUOTED
*		-SINGLEQUOTE : DEFAULT
*	-DOUBLEQOUTE : DQUOTED
*		-BACKSLASH escapes: $, BACKTIC, BACKSLASH, DOUBLEQUOTE
*		-$ starts substitution : DOUBLEQUOTE_DOLLAR
*		-BACKTIC start substitution : DOUBLEQUOTE_BACKTICKED
*		-DOUBLEQUOTE : DEFAULT
*	-BACKTIC : DEFAULT_BACKTICKED
*		--TODO
*/

package com.happypeople.hsh.hsh.l1parser;
import java.util.*;

public class L1Parser // implements TokenManager
{
	/** Stack of states. Usefull to switch to "previous" state. Initialized to DEFAULT. */
	private LinkedList<Integer> stateStack=new LinkedList<Integer>(Arrays.asList(DEFAULT));

	private void pushState(int state) {
		stateStack.push(state);
		token_source.SwitchTo(state);
	}
	private void popState() {
		stateStack.pop();
		token_source.SwitchTo(stateStack.peek());
	}

	/** Interface for token-translation between L1Parser and L2Parser
	*/
	public L1Node nextL1Node() throws ParseException {
		return word_part();
		/*
		if(partQueue.isEmpty())			fetchMoreL1Nodes();
		return partQueue.removeFirst();
		*/
	}

/*
	private Deque<L1Node> partQueue=new LinkedList<L1Node>();

	private void fetchMoreL1Nodes() throws ParseException {
		List<L1Node> more=word_part();
		for(L1Node node : more)
			partQueue.addLast(node);	}
	*/
		}

PARSER_END(L1Parser)

TOKEN:
{	< #SQUOTE: "'" >
|	< #DQUOTE: "\"" > 
|	< #BQUOTE: "\\" >
|	< #BACKTIC:	"`" >
|	< #DOLLAR:	"$" >
|	< #BANYTHING: ~[] >
}

TOKEN:
{ // operators
	< AND_IF	: "&&" >
|	< OR_IF		: "||" >
|   < DSEMI		: ";;" >
|	< DLESS		: "<<" >
|	< DGREAT	: ">>" >
|	< LESSAND	: "<&" >
|	< GREATAND	: ">&" >
|	< LESSGREAT	: "<>" >
|	< DLESSDASH : "<<-" > 
|	< CLOBBER	: ">|" >
// first letters of operators
|	< BG 		: "&" >
|	< PIPE 		: "|" >
|	< SEMICOLON : ";" >  
|	< LESS  	: "<" >  
|	< GREAT  	: ">" >  
}

< DEFAULT, BACKTICKED > TOKEN:
{
	< ESC_CHAR			: "\\" < BANYTHING > >
}

< DEFAULT, DQUOTED > TOKEN:
{	< BACKTIC_START		: < BACKTIC > >
}

/** no escaped chars possible in SQUOTED */
<SQUOTED> TOKEN:
{
	< SQUOTE_END: < SQUOTE > > 	 // :DEFAULT	
|	< SANYTHING	: (~["'"])+ >
}


/** In BACKTICKED we have to find the end of the backtic state. Anything else is one word (which will be
	later parsed when substituted).
*/
<BACKTICKED > TOKEN:
{
	< BACKTIC_ANYTHING	: (~["`", "\\"])+ >
|	< BACKTIC_END 		: < BACKTIC > >	
}

<DEFAULT> TOKEN:
{
	< SQUOTE_START	: < SQUOTE > > 	 /* :SQUOTED */
|	< DQUOTE_START	: < DQUOTE > >	 /* :DQUOTED  */
|	< WS			: (" "|"\t")+  >
|	< NEWLINE		: "\n" | "\r\n" >
|	< DEFAULT_ANYTHING		: (~["`", "'", "\"", "\\", " ", "\t", "\n", "&", "|", ";", "<", ">"])+ >
}

/** According to 2.2.3
The backslash shall retain its special meaning as an escape character only when
followed by one of the following characters when considered special:
$   `   "   \   <newline>
*/
<DQUOTED> TOKEN:
{
	< ESC_DQUOTE			: "\\\"" >
|	< ESC_DOLLAR			: "\\$" >
|	< ESC_BACKTIC			: "\\`" >
|	< ESC_BACKSLASH			: "\\\\" >
//|	< DOLLAR 				: "$" >
	/* a backslash is a simple char if not followed by one of the above. */
|	< CHAR_BACKSLASH		: < BQUOTE > >
|	< DQUOTE_END			: < DQUOTE > >	/* : DEFAULT */
//|	< DOLLAR_SUBST_START	: "$(" >		: DOLLAR_SUBST
//|	< DOLLAR				: "$" >			: DOLLAR
	/** anything else */
|	< DANYTHING				: (~["\"", "$", "`", "\\"])+ >
}

/** Creates a List of L1Node, types are SimpleL1Node or Backticked. */
// TODO change to DQuoteNode, because one must know for all subnodes that these are part of a DQuoted,
// and an empty List makes problems.
DQuotedL1Node dquoted():
{
	DQuotedL1Node ret=new DQuotedL1Node();
	Token t;
	BacktickedNode bn;
}
{
	< DQUOTE_START > { pushState(DQUOTED); }	(
		  t=< ESC_DQUOTE >		{ ret.add(new SimpleL1Node("\"")); }		| t=< ESC_DOLLAR >		{ ret.add(new SimpleL1Node("$")); }
		| t=< ESC_BACKTIC >		{ ret.add(new SimpleL1Node("`")); }
		| t=< ESC_BACKSLASH >	{ ret.add(new SimpleL1Node("\\")); }
		| t=< CHAR_BACKSLASH >	{ ret.add(new SimpleL1Node("\\")); }
		| t=< DANYTHING >		{ ret.add(new SimpleL1Node(t.image)); }
		| bn=backticked()		{ ret.add(bn); }	)*
	< DQUOTE_END > {
		popState();
		return ret;
	}
}

/** A part of a word in state DEFAULT, simple text.
* @return the part as a String
*/
SimpleL1Node default_part():
{
	final StringBuilder sb=new StringBuilder();
	Token t;
}{
	(	t=< ESC_CHAR > { sb.append(t.image.substring(1, 1)); }	
|		t=< DEFAULT_ANYTHING > { sb.append(t.image); }
	)
	{ return new SimpleL1Node(sb.toString()); }}

/** creates a BacktickedNode representing what is found between the two backtics */
BacktickedNode backticked():
{
	final StringBuilder sb=new StringBuilder();
	Token t;
}
{
	< BACKTIC_START > { pushState(BACKTICKED); }	(
		t=< ESC_CHAR > { sb.append(t.image.substring(1, 1)); }	
	|	t=< BACKTIC_ANYTHING > { sb.append(t.image); }
	)*
	< BACKTIC_END > {
			popState();
			// TODO could check if number of ", ' and ` are even and/or nested wrong
			// But the subsequent parsing of the backticked command will do this either
			return new BacktickedNode(sb.toString());
		}}

/** creates a String representing what is found between the two single-quotes */
SQuotedL1Node squoted():
{	final StringBuilder sb=new StringBuilder();
	Token t;
}{	<SQUOTE_START> { pushState(SQUOTED); }
	( t=<SANYTHING> { sb.append(t.image); } )?
	<SQUOTE_END> {
		popState();
		return new SQuotedL1Node(sb.toString());
	}}

OperatorL1Node operator():
{
	Token t;}{
	(	t=< AND_IF >
|	t=< OR_IF >
|   t=< DSEMI >
|	t=< DLESS >
|	t=< DGREAT >
|	t=< LESSAND >
|	t=< GREATAND >
|	t=< LESSGREAT >
|	t=< DLESSDASH > 
|	t=< CLOBBER >
// TODO: not sure what to do whith these.
// They must be parsed, they separate words.
// But they are no Operators. ???
|	t=< BG >
|	t=< PIPE >
|	t=< SEMICOLON >
|	t=< LESS >
|	t=< GREAT >
	) {
		return new OperatorL1Node(t);	}
}

/** part of a word or whole word.
* Result of parsing on L1-Level is a stream of word_part, which are
* then concatenated to words according to several rules.
* These words are the tokens for parsing on L2-Level.
* A word_part is a  L1Nodes which is the content of that part of a word.
* Which word_parts are concatenated to form complete words, and which ones act as
* word separators is implemented in L2TokenManager.
*/
L1Node word_part():
{
	L1Node ret;
	Token t;
}
{
	(
	ret=default_part()|	ret=backticked()	
|	ret=dquoted()		
|	ret=squoted()		
|	ret=operator()	
|	t=< WS >				{ ret=new WsL1Node(t); }
|	t=< NEWLINE >			{ ret=new NlL1Node(t); }
|	t=< EOF >				{ ret=new EofL1Node(t); }
	)
	{ return ret; }
}

/*
void complete_word():
{
	ComplexL1Node node=new ComplexL1Node();
	List<L1Node> child;
}
{
	( child=word_part() { node.addChilds(child); } )+
}

void words():
{}{	( separator() | complete_word() )* < EOF >
}
*/

/*
TOKEN:
{

/* Token for HshParser */
/*
|	< ASSIGNMENT_WORD >
|	< IO_NUMBER	>
|	< NAME >
|	< NEWLINE >
|	< WORD >
*/

/* language token. */
/*
|	< AND_IF	: "&&" >
|	< BANG		: "!" >
|	< CASE		: "case" >
|	< CLOBBER	: ">|" >
|	< DLESS		: "<<" >
|	< DLESSDASH	: "<<-" >
|	< DGREAT	: ">>" >
|	< DO 		: "do" >
|	< DONE		: "done" >
|	< DSEMI		: ";;" >
|	< ELSE		: "else" >
|	< ELIF		: "elif" >
|	< ESAC		: "esac" >
|	< FI		: "fi" >
|	< FOR		: "for" >
|	< GREATAND	: ">&" >
|	< GREATER	: ">" >
|	< IF		: "if" >
|	< IN		: "in" >
|	< KLAMMER_AUF: "(" >
|	< KLAMMER_ZU: ")" >
|	< LBRACE	: "{" >
|	< LESS		: "<" >
|	< LESSAND	: "<&" >
|	< LESSGREAT	: "<>" >
|	< OR_IF		: "||" >
|	< RBRACE	: "}" >
|	< SEMICOLON : ";" >
|	< THEN		: "then" >
|	< UNTIL 	: "until" >
|	< UPPERSANT	: "&" >
|	< PIPE 		: "|" >
|	< WHILE		: "while" >
}
*/

